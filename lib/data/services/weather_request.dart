import 'dart:convert';

import 'package:flutter/material.dart';
import 'package:latlong2/latlong.dart';
import 'package:http/http.dart' as http;
import 'package:weather_assistant/config/api_keys.dart';
import 'package:weather_assistant/data/models/daily_weather.dart';
import 'package:weather_assistant/data/models/weather_forecast.dart';
import 'package:weather_assistant/data/services/local_database.dart';
import 'package:weather_assistant/ui/screens/notifs/storage/notification_settings_storage.dart';
import 'package:weather_assistant/ui/screens/notifs/weather_notifications_screen.dart';
import 'package:xml/xml.dart';

Future<Map<String, dynamic>> fetchWeatherData({LatLng? mapPoint, String? cityName}) async {
  try {
    final response = await http.get(
        Uri.parse(
            'https://weatherapi-com.p.rapidapi.com/current.json?q=${mapPoint != null ? '${mapPoint!.latitude}%2C${mapPoint!.longitude}' : cityName}&lang=ru'),
        headers: {
          'X-RapidAPI-Key': weatherApiKey,
          'X-RapidAPI-Host': 'weatherapi-com.p.rapidapi.com',
        });
    if (response.statusCode == 200) {
      final decodedBody = utf8.decode(response.bodyBytes);
      return jsonDecode(decodedBody);
    } else {
      throw Exception("–ü–ª–æ—Ö–æ–π —Å—Ç–∞—Ç—É—Å");
    }
  } catch (ex) {
    debugPrint(ex.toString());
    throw Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é");
  }
}

Future<Map<String, dynamic>> fetchWeatherForecast(LatLng mapPoint) async {
  try {
    final response = await http.get(
      Uri.parse(
          'https://api.open-meteo.com/v1/forecast?latitude=${mapPoint.latitude}&longitude=${mapPoint.longitude}&hourly=temperature_2m&&forecast_days=7'),
    );
    if (response.statusCode == 200) {
      return json.decode(response.body);
    } else {
      throw Exception("–ü–ª–æ—Ö–æ–π —Å—Ç–∞—Ç—É—Å");
    }
  } catch (ex) {
    debugPrint(ex.toString());
    throw Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é");
  }
}

Future<List<DailyWeather>> fetchWeatherForRoute(List<RoutePoint> routePoints) async {
  final List<DailyWeather> weatherData = [];

  for (final point in routePoints) {
    final String formattedDate = point.arrivalDate.toIso8601String().split('T')[0];

    Uri url;
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–∞—è –¥–∞—Ç–∞ –∏–ª–∏ –±—É–¥—É—â–∞—è
    if (point.arrivalDate.isBefore(DateTime.now()) && point.arrivalDate.day != DateTime.now().day) {
      url = Uri.parse(
        'https://archive-api.open-meteo.com/v1/archive'
        '?latitude=${point.latitude}'
        '&longitude=${point.longitude}'
        '&start_date=$formattedDate'
        '&end_date=$formattedDate'
        '&timezone=Europe%2FMoscow'
        '&daily=precipitation_sum,wind_speed_10m_max,uv_index_max,precipitation_probability_max,'
        'temperature_2m_max,temperature_2m_min',
      );
    } else {
      url = Uri.parse(
        'https://api.open-meteo.com/v1/forecast'
        '?latitude=${point.latitude}'
        '&longitude=${point.longitude}'
        '&start_date=$formattedDate'
        '&end_date=$formattedDate'
        '&timezone=Europe%2FMoscow'
        '&daily=precipitation_sum,wind_speed_10m_max,uv_index_max,precipitation_probability_mean,'
        'temperature_2m_max,temperature_2m_min',
      );
    }

    try {
      final response = await http.get(url);

      if (response.statusCode == 200) {
        final Map<String, dynamic> apiResponse = jsonDecode(response.body);

        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON –≤ –æ–±—ä–µ–∫—Ç DailyWeather
        final List<DailyWeather> dailyData = DailyWeather.fromJsonList(
          apiResponse,
          point.locationName,
        );

        if (dailyData.isNotEmpty) {
          // –ë–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π –æ–±—ä–µ–∫—Ç, —Ç–∞–∫ –∫–∞–∫ –∑–∞–ø—Ä–æ—Å –¥–ª—è –æ–¥–Ω–æ–π –¥–∞—Ç—ã
          weatherData.add(dailyData.first);
        }
      } else {
        print("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è ${point.locationName}: ${response.statusCode}");
      }
    } catch (e) {
      print("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è ${point.locationName}: $e");
    }
  }

  return weatherData;
}

Future<Map<String, dynamic>> fetchWeatherForecastByDays(
    String? city, LatLng? mapPoint, int days) async {
  try {
    final uri =  Uri.parse('https://api.weatherapi.com/v1/forecast'
        '.json?key=$forecastKey${mapPoint != null ? '&q=${mapPoint.latitude},${mapPoint
        .longitude}' : ''}&days=$days&aqi=no&alerts=no');
    final response = await http.get(uri,
    );
    if (response.statusCode == 200) {
      return json.decode(response.body);
    } else {
      throw Exception("–ü–ª–æ—Ö–æ–π —Å—Ç–∞—Ç—É—Å");
    }
  } catch (ex) {
    debugPrint(ex.toString());
    throw Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é");
  }
}

Future<Map<String, dynamic>> fetchWeatherDataByName(String city) async {
  try {
    final response = await http.get(
        Uri.parse('https://weatherapi-com.p.rapidapi.com/current.json?q=${city}&lang=ru'),
        headers: {
          'X-RapidAPI-Key': weatherApiKey,
          'X-RapidAPI-Host': 'weatherapi-com.p.rapidapi.com',
        });
    if (response.statusCode == 200) {
      return json.decode(response.body);
    } else {
      throw Exception("–ü–ª–æ—Ö–æ–π —Å—Ç–∞—Ç—É—Å");
    }
  } catch (ex) {
    debugPrint(ex.toString());
    throw Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é");
  }
}


Future<void> checkWeatherAndSendNotification() async {
  print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–≥–æ–¥—É –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...");

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  final settings = await NotificationSettingsStorage().loadSettings();

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
  final now = DateTime.now();
  final bool isMorning = now.hour >= 6 && now.hour < 12; // 6:00 - 12:00
  final bool isEvening = now.hour >= 18 && now.hour < 23; // 18:00 - 23:00

  // –ï—Å–ª–∏ –≤—ã–∫–ª—é—á–µ–Ω—ã —É—Ç—Ä–µ–Ω–Ω–∏–µ –∏ –≤–µ—á–µ—Ä–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
  if (!settings.morningNotification && !settings.eveningNotification &&
      !settings.severeWeatherAlerts) {
    print("üö´ –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.");
    return;
  }

  // –î–∞–Ω–Ω—ã–µ –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏ (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ)
  double latitude = 55.75;
  double longitude = 37.61;

  // –ó–∞–ø—Ä–æ—Å –∫ Open-Meteo API
  final response = await http.get(Uri.parse(
      'https://api.open-meteo.com/v1/forecast?latitude=$latitude&longitude=$longitude&daily=temperature_2m_max,precipitation_sum&timezone=auto'));

  if (response.statusCode == 200) {
    final data = jsonDecode(response.body);

    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
    final maxTemp = data["daily"]["temperature_2m_max"][1];
    final precipitation = data["daily"]["precipitation_sum"][1];

    String message = "";
    int priority = 0;

    // –õ–æ–≥–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    if (settings.morningNotification && isMorning) {
      message = "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –°–µ–≥–æ–¥–Ω—è –±—É–¥–µ—Ç ${maxTemp}¬∞C. ";
      priority = 0;
      if (precipitation > 5) {
        message += "–û–∂–∏–¥–∞—é—Ç—Å—è –æ—Å–∞–¥–∫–∏, –≤–æ–∑—å–º–∏—Ç–µ –∑–æ–Ω—Ç! ‚òî";
        priority = 1;
      }
    }

    if (settings.eveningNotification && isEvening) {
      message = "–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–≤—Ç—Ä–∞: ${maxTemp}¬∞C. ";
      priority = 0;
      if (precipitation > 5) {
        message += "–û–∂–∏–¥–∞—é—Ç—Å—è –æ—Å–∞–¥–∫–∏, –≤–æ–∑—å–º–∏—Ç–µ –∑–æ–Ω—Ç! ‚òî";
        priority = 1;
      }
    }

    if (settings.severeWeatherAlerts && precipitation > 20) {
      message = "‚ö† –í–Ω–∏–º–∞–Ω–∏–µ! –°–∏–ª—å–Ω—ã–µ –æ—Å–∞–¥–∫–∏: ${precipitation} –º–º. –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã!";
      priority = 2;
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç
    if (message.isNotEmpty) {
      await showWeatherNotification("–ü–æ–≥–æ–¥–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", message, priority);
      print("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: $message");
    } else {
      print("‚ùå –ù–µ—Ç –æ—Å–Ω–æ–≤–∞–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.");
    }
  }
}

